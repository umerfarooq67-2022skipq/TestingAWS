{
  "Resources": {
    "UF67CWROLEC3D2C3AC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/CloudWatchFullAccess"
              ]
            ]
          }
        ],
        "RoleName": "CLOUD_WATCH_FULL_ACCESS",
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/UF67_CW_ROLE/Resource"
      }
    },
    "UF67CWROLEDefaultPolicyA1F2CE53": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "uffilebucket6D8E646A",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "uffilebucket6D8E646A",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "UF67CWROLEDefaultPolicyA1F2CE53",
        "Roles": [
          {
            "Ref": "UF67CWROLEC3D2C3AC"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/UF67_CW_ROLE/DefaultPolicy/Resource"
      }
    },
    "UFWHLambdaFunctionD23A1E28": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "ce42c53314a93b931e510c08ef5552c7a0d0bb338af55fdb58b81114fbd41d45.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "UF67CWROLEC3D2C3AC",
            "Arn"
          ]
        },
        "Handler": "WHLambda.lambdaHandlerWebHealth",
        "Runtime": "python3.7",
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "DependsOn": [
        "UF67CWROLEDefaultPolicyA1F2CE53",
        "UF67CWROLEC3D2C3AC"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/UF_WH_Lambda_Function/Resource",
        "aws:asset:path": "asset.ce42c53314a93b931e510c08ef5552c7a0d0bb338af55fdb58b81114fbd41d45",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "uffilebucket6D8E646A": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "ufbucketsprinttwo",
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true"
          },
          {
            "Key": "aws-cdk:cr-owned:b34435d9",
            "Value": "true"
          },
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ],
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/uf_file_bucket/Resource"
      }
    },
    "uffilebucketPolicyBE408701": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "uffilebucket6D8E646A"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "uffilebucket6D8E646A",
                        "Arn"
                      ]
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn"
                  ]
                }
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "uffilebucket6D8E646A",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "uffilebucket6D8E646A",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/uf_file_bucket/Policy/Resource"
      }
    },
    "uffilebucketAutoDeleteObjectsCustomResource1D06F9BE": {
      "Type": "Custom::S3AutoDeleteObjects",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "uffilebucket6D8E646A"
        }
      },
      "DependsOn": [
        "uffilebucketPolicyBE408701"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/uf_file_bucket/AutoDeleteObjectsCustomResource/Default"
      }
    },
    "uffilebucketNotifications038AFA12": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "uffilebucket6D8E646A"
        },
        "NotificationConfiguration": {
          "TopicConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:Put"
              ],
              "TopicArn": {
                "Ref": "SprintTwoBucketTopic99E07946"
              }
            }
          ]
        },
        "Managed": true
      },
      "DependsOn": [
        "SprintTwoBucketTopicPolicyC5500C57",
        "SprintTwoBucketTopic99E07946",
        "SprintTwoBucketTopicumerfarooq67skipqgmailcom1E9B0A40"
      ],
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/uf_file_bucket/Notifications/Resource"
      }
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
      }
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "bdb08b9984816ecf43301a0c6d8913e270ee2448940b6b95e430dd222a4d90be.zip"
        },
        "Timeout": 900,
        "MemorySize": 128,
        "Handler": "__entrypoint__.handler",
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "uffilebucket6D8E646A"
              },
              " S3 bucket."
            ]
          ]
        }
      },
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
      ],
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
        "aws:asset:path": "asset.bdb08b9984816ecf43301a0c6d8913e270ee2448940b6b95e430dd222a4d90be",
        "aws:asset:property": "Code"
      }
    },
    "DeploySprintTwoFilesAwsCliLayer7DE7C76D": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "61f3b82f5fe3b135f58644b9bb25da9af6d46345bbe50c3d935682beae71ef17.zip"
        },
        "Description": "/opt/awscli/aws"
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/DeploySprintTwoFiles/AwsCliLayer/Resource",
        "aws:asset:path": "asset.61f3b82f5fe3b135f58644b9bb25da9af6d46345bbe50c3d935682beae71ef17.zip",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Content"
      }
    },
    "DeploySprintTwoFilesCustomResourceB07A9C4C": {
      "Type": "Custom::CDKBucketDeployment",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn"
          ]
        },
        "SourceBucketNames": [
          {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          }
        ],
        "SourceObjectKeys": [
          "00892e51b7b1b2c9be1bd9715e19899093074201d49ee3eab6024b5bb815bf48.zip"
        ],
        "DestinationBucketName": {
          "Ref": "uffilebucket6D8E646A"
        },
        "RetainOnDelete": false,
        "Prune": true
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/DeploySprintTwoFiles/CustomResource/Default"
      }
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource"
      }
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "uffilebucket6D8E646A",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "uffilebucket6D8E646A",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": [
          {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "f98b78092dcdd31f5e6d47489beb5f804d4835ef86a8085d0a2053cb9ae711da.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "DeploySprintTwoFilesAwsCliLayer7DE7C76D"
          }
        ],
        "Runtime": "python3.7",
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ],
        "Timeout": 900
      },
      "DependsOn": [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
      ],
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource",
        "aws:asset:path": "asset.f98b78092dcdd31f5e6d47489beb5f804d4835ef86a8085d0a2053cb9ae711da",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "SprintTwoBucketTopic99E07946": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/Sprint Two Bucket Topic/Resource"
      }
    },
    "SprintTwoBucketTopicumerfarooq67skipqgmailcom1E9B0A40": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "email",
        "TopicArn": {
          "Ref": "SprintTwoBucketTopic99E07946"
        },
        "Endpoint": "umer.farooq67.skipq@gmail.com"
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/Sprint Two Bucket Topic/umer.farooq67.skipq@gmail.com/Resource"
      }
    },
    "SprintTwoBucketTopicPolicyC5500C57": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "uffilebucket6D8E646A",
                      "Arn"
                    ]
                  }
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "s3.amazonaws.com"
              },
              "Resource": {
                "Ref": "SprintTwoBucketTopic99E07946"
              },
              "Sid": "0"
            }
          ],
          "Version": "2012-10-17"
        },
        "Topics": [
          {
            "Ref": "SprintTwoBucketTopic99E07946"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/Sprint Two Bucket Topic/Policy/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
        "Code": {
          "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n    response_status = \"SUCCESS\"\n    error_message = \"\"\n    try:\n        props = event[\"ResourceProperties\"]\n        bucket = props[\"BucketName\"]\n        notification_configuration = props[\"NotificationConfiguration\"]\n        request_type = event[\"RequestType\"]\n        managed = props.get('Managed', 'true').lower() == 'true'\n        stack_id = event['StackId']\n\n        if managed:\n          config = handle_managed(request_type, notification_configuration)\n        else:\n          config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n        put_bucket_notification_configuration(bucket, config)\n    except Exception as e:\n        logging.exception(\"Failed to put bucket notification configuration\")\n        response_status = \"FAILED\"\n        error_message = f\"Error: {str(e)}. \"\n    finally:\n        submit_response(event, context, response_status, error_message)\n\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n\n  # find external notifications\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  # if delete, that's all we need\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  # otherwise, merge external with incoming config and augment with id\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n  return notifications\n\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    # if the notification was created by us, we know what id to expect\n    # so we can filter by it.\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  return external_notifications\n\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n    response_body = json.dumps(\n        {\n            \"Status\": response_status,\n            \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n            \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n            \"StackId\": event[\"StackId\"],\n            \"RequestId\": event[\"RequestId\"],\n            \"LogicalResourceId\": event[\"LogicalResourceId\"],\n            \"NoEcho\": False,\n        }\n    ).encode(\"utf-8\")\n    headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n    try:\n        req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n        with urllib.request.urlopen(req) as response:\n            print(response.read().decode(\"utf-8\"))\n        print(\"Status code: \" + response.reason)\n    except Exception as e:\n        print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 300,
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
      ],
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
      }
    },
    "UFWHRULE0E24ACC0": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "This is event rule to trigger lambda function every 1 min.",
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "UFWHLambdaFunctionD23A1E28",
                "Arn"
              ]
            },
            "Id": "Target0"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/UF_WH_RULE/Resource"
      }
    },
    "UFWHRULEAllowEventRuleUmerFarooq67Sprint2StackUFWHLambdaFunction1BB815EE04742C09": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "UFWHLambdaFunctionD23A1E28",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "UFWHRULE0E24ACC0",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/UF_WH_RULE/AllowEventRuleUmerFarooq67Sprint2StackUFWHLambdaFunction1BB815EE"
      }
    },
    "TopicAvailability2EA50E35": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/Topic Availability/Resource"
      }
    },
    "TopicLatencyC2BBEF34": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/Topic Latency/Resource"
      }
    },
    "skipqTopicAvailability2C0A56C0": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/skipq Topic Availability/Resource"
      }
    },
    "skipqTopicAvailabilityumerfarooq67skipqgmailcom27D07AAB": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "email",
        "TopicArn": {
          "Ref": "skipqTopicAvailability2C0A56C0"
        },
        "Endpoint": "umer.farooq67.skipq@gmail.com"
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/skipq Topic Availability/umer.farooq67.skipq@gmail.com/Resource"
      }
    },
    "skipqTopicLatency8FC17F9A": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/skipq Topic Latency/Resource"
      }
    },
    "skipqTopicLatencyumerfarooq67skipqgmailcomFA9C390E": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "email",
        "TopicArn": {
          "Ref": "skipqTopicLatency8FC17F9A"
        },
        "Endpoint": "umer.farooq67.skipq@gmail.com"
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/skipq Topic Latency/umer.farooq67.skipq@gmail.com/Resource"
      }
    },
    "skipqalarmavailabilityAE7E8870": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "skipqTopicAvailability2C0A56C0"
          }
        ],
        "DatapointsToAlarm": 1,
        "Metrics": [
          {
            "Id": "m1",
            "Label": "Availability Metric",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "url",
                    "Value": "www.skipq.org"
                  }
                ],
                "MetricName": "availability",
                "Namespace": "UF67NameSPACE"
              },
              "Period": 60,
              "Stat": "Average"
            },
            "ReturnData": true
          }
        ],
        "Threshold": 1
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/skipq_alarm_availability/Resource"
      }
    },
    "skipqalarmlatency3A570832": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "skipqTopicLatency8FC17F9A"
          }
        ],
        "DatapointsToAlarm": 1,
        "Metrics": [
          {
            "Id": "m1",
            "Label": "Latency Metric",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "url",
                    "Value": "www.skipq.org"
                  }
                ],
                "MetricName": "latency",
                "Namespace": "UF67NameSPACE"
              },
              "Period": 60,
              "Stat": "Average"
            },
            "ReturnData": true
          }
        ],
        "Threshold": 0.02
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/skipq_alarm_latency/Resource"
      }
    },
    "googleTopicAvailability63A480D8": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/google Topic Availability/Resource"
      }
    },
    "googleTopicAvailabilityumerfarooq67skipqgmailcom3538E5BA": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "email",
        "TopicArn": {
          "Ref": "googleTopicAvailability63A480D8"
        },
        "Endpoint": "umer.farooq67.skipq@gmail.com"
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/google Topic Availability/umer.farooq67.skipq@gmail.com/Resource"
      }
    },
    "googleTopicLatency0DF40A82": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/google Topic Latency/Resource"
      }
    },
    "googleTopicLatencyumerfarooq67skipqgmailcom9D0B5B77": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "email",
        "TopicArn": {
          "Ref": "googleTopicLatency0DF40A82"
        },
        "Endpoint": "umer.farooq67.skipq@gmail.com"
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/google Topic Latency/umer.farooq67.skipq@gmail.com/Resource"
      }
    },
    "googlealarmavailability33A43B9F": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "googleTopicAvailability63A480D8"
          }
        ],
        "DatapointsToAlarm": 1,
        "Metrics": [
          {
            "Id": "m1",
            "Label": "Availability Metric",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "url",
                    "Value": "www.google.com"
                  }
                ],
                "MetricName": "availability",
                "Namespace": "UF67NameSPACE"
              },
              "Period": 60,
              "Stat": "Average"
            },
            "ReturnData": true
          }
        ],
        "Threshold": 1
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/google_alarm_availability/Resource"
      }
    },
    "googlealarmlatencyEC7B5818": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "googleTopicLatency0DF40A82"
          }
        ],
        "DatapointsToAlarm": 1,
        "Metrics": [
          {
            "Id": "m1",
            "Label": "Latency Metric",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "url",
                    "Value": "www.google.com"
                  }
                ],
                "MetricName": "latency",
                "Namespace": "UF67NameSPACE"
              },
              "Period": 60,
              "Stat": "Average"
            },
            "ReturnData": true
          }
        ],
        "Threshold": 0.02
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/google_alarm_latency/Resource"
      }
    },
    "namalTopicAvailability2D72BAE4": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/namal Topic Availability/Resource"
      }
    },
    "namalTopicAvailabilityumerfarooq67skipqgmailcomD365EF21": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "email",
        "TopicArn": {
          "Ref": "namalTopicAvailability2D72BAE4"
        },
        "Endpoint": "umer.farooq67.skipq@gmail.com"
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/namal Topic Availability/umer.farooq67.skipq@gmail.com/Resource"
      }
    },
    "namalTopicLatencyDAB6BC4A": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Cohort",
            "Value": "Orion"
          },
          {
            "Key": "Name",
            "Value": "Umer67"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/namal Topic Latency/Resource"
      }
    },
    "namalTopicLatencyumerfarooq67skipqgmailcom589D613D": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "email",
        "TopicArn": {
          "Ref": "namalTopicLatencyDAB6BC4A"
        },
        "Endpoint": "umer.farooq67.skipq@gmail.com"
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/namal Topic Latency/umer.farooq67.skipq@gmail.com/Resource"
      }
    },
    "namalalarmavailabilityAFC2C534": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "namalTopicAvailability2D72BAE4"
          }
        ],
        "DatapointsToAlarm": 1,
        "Metrics": [
          {
            "Id": "m1",
            "Label": "Availability Metric",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "url",
                    "Value": "www.namal.edu.pk"
                  }
                ],
                "MetricName": "availability",
                "Namespace": "UF67NameSPACE"
              },
              "Period": 60,
              "Stat": "Average"
            },
            "ReturnData": true
          }
        ],
        "Threshold": 1
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/namal_alarm_availability/Resource"
      }
    },
    "namalalarmlatency40ADFB12": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "namalTopicLatencyDAB6BC4A"
          }
        ],
        "DatapointsToAlarm": 1,
        "Metrics": [
          {
            "Id": "m1",
            "Label": "Latency Metric",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "url",
                    "Value": "www.namal.edu.pk"
                  }
                ],
                "MetricName": "latency",
                "Namespace": "UF67NameSPACE"
              },
              "Period": 60,
              "Stat": "Average"
            },
            "ReturnData": true
          }
        ],
        "Threshold": 0.02
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/namal_alarm_latency/Resource"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/1VRy27CMBD8lt7NForUniFVTz1Eoeo1Ms4WtviBvDYosvLvtRPK4zQzO5vRevICi1eYP8kzz1R3mGnaQtoEqQ4ij9pE0kBqnEZR/dgRa6dJ9UVObBBamm0nIX1EqwI5W7x7/il79N/ouegN2Z3G4B42avSGuPiD4GWbJDMGhlUB0eFRu96gDbCO6oDh/Too25Cm6VoyiomWyAub4Hbzvc5fW4b05Y6kijeRTdyy8nT8v+1Bjyu3tDs5CDzli3JeEy9tZRyE0i52ZxnUHtJKS2+KNZJhEOMDc9u7XIqoIgdnGmQXvZoSrvzBqr07UYf+UnyrS79t/l1KE6zOXGkaKy8RlbMdhbHYug97Z5+X8AaL+dMvE818tIEMQjPhH5VLuZ0MAgAA"
      },
      "Metadata": {
        "aws:cdk:path": "UmerFarooq67Sprint2Stack/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  },
  "Parameters": {
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}